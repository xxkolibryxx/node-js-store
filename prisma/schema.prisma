// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model Product {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  price       Int
  description String?
  image       String?   @db.VarChar(255)
  category    Category? @relation(fields: [categoryId], references: [id])

  cartItem   CartItem[]
  orderItem  OrderItem[]
  categoryId Int?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("product")
}

model Category {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(255)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("category")
}

model User {
  id             Int       @id @default(autoincrement())
  first_name     String
  last_name      String
  email          String    @unique
  password       String
  role           Role      @default(USER)
  activationLink String?   @unique
  resetLink      String?   @unique
  isActivated    Boolean   @default(false)
  sessions       Session[]
  cart           Cart?
  order          Order[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("user")
}

model Session {
  id        Int      @id @default(autoincrement())
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([expiresAt])
  @@map("session")
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("cart")
}

model CartItem {
  id        Int  @id @default(autoincrement())
  cartId    Int?
  productId Int
  quantity  Int  @default(1)

  product   Product  @relation(fields: [productId], references: [id])
  cart      Cart?    @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, cartId])
  @@map("cart_item")
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Int
  address   String
  phone     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("order")
}

model OrderItem {
  id          Int    @id @default(autoincrement())
  orderId     Int
  productId   Int
  quantity    Int
  title       String
  priceAtTime Int

  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_item")
}
